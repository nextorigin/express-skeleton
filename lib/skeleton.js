// Generated by IcedCoffeeScript 108.0.9
var Flannel, Skeleton, bodyParser, compression, express, favicon, http, path, render,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

require("source-map-support/register");

http = require("http");

path = require("path");

express = require("express");

favicon = require("serve-favicon");

Flannel = require("flannel");

compression = require("compression");

bodyParser = require("body-parser");

render = require("express-rendertype");

Skeleton = (function() {
  Skeleton.prototype.logPrefix = "(Skeleton)";

  Skeleton.prototype.port = 3000;

  function Skeleton(options) {
    this.options = options;
    this.handleRouteErrors = __bind(this.handleRouteErrors, this);
    this.bindRoutes = __bind(this.bindRoutes, this);
    this.listening = __bind(this.listening, this);
    this.error = __bind(this.error, this);
    this.listen = __bind(this.listen, this);
    if (!Flannel.winston) {
      Flannel.init({
        Console: {
          level: "debug"
        }
      });
    }
    Flannel.shirt(this);
    this.debug("initializing");
    this.address = this.options.address;
    this.port = process.env.PORT || this.port;
    this.app = express();
    this.app.set("views", path.join(__dirname, "views"));
    this.app.set("view engine", "jade");
    if (this.options.favicon) {
      this.app.use(favicon(path.join(__dirname, "public", "favicon.ico")));
    }
    this.app.use(Flannel.morgan(" info"));
    this.app.use(compression());
    this.app.use(bodyParser.json());
    this.app.use(bodyParser.urlencoded({
      extended: false
    }));
    this.app.use(express["static"](this.options["static"]));
    this.app.use(render.auto("text"));
    this.bindRoutes();
    this.handleRouteErrors();
  }

  Skeleton.prototype.listen = function(port) {
    if (port == null) {
      port = this.port;
    }
    this.server = http.createServer(this.app);
    this.server.listen(port);
    this.server.on("error", this.error);
    return this.server.on("listening", this.listening);
  };

  Skeleton.prototype.error = function(error) {
    var bind;
    if (error.syscall !== "listen") {
      throw error;
    }
    bind = typeof this.port === "string" ? "Pipe " + this.port : "Port " + this.port;
    switch (error.code) {
      case "EACCES":
        console.error("" + bind + " requires elevated privileges");
        return process.exit(1);
      case "EADDRINUSE":
        console.error("" + bind + " is already in use");
        return process.exit(1);
      default:
        throw error;
    }
  };

  Skeleton.prototype.listening = function() {
    return this.info("listening on " + (this.server.address().address) + ":" + (this.server.address().port));
  };

  Skeleton.prototype.bindRoutes = function() {
    return this.debug("stub for loading routes");
  };

  Skeleton.prototype.handleRouteErrors = function() {
    this.app.use(render.Errors.Error404);
    if ((this.app.get("env")) === "development") {
      this.app.use(render.FancyErrors.auto("text", null, this.log));
    }
    return this.app.use(render.Errors.auto("text", null, this.log));
  };

  return Skeleton;

})();

module.exports = Skeleton;

//# sourceMappingURL=skeleton.js.map
